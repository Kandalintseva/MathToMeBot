import telebot
from telebot import types
import sqlite3
from config import TOKEN, ADMIN_ID

bot = telebot.TeleBot(TOKEN)



@bot.message_handler(commands=['getdb'], func=lambda m: m.from_user.id == ADMIN_ID)
def send_db_file(message):
    with open('tutor_bot.db', 'rb') as f:
        bot.send_document(message.chat.id, f)
 
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('tutor_bot.db')
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS students (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        name TEXT,
        class TEXT,
        register_date TEXT
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        task_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        task_text TEXT,
        photo_path TEXT,
        status TEXT DEFAULT 'pending',
        send_date TEXT,
        FOREIGN KEY (user_id) REFERENCES students(user_id)
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS feedback (
        feedback_id INTEGER PRIMARY KEY AUTOINCREMENT,
        task_id INTEGER,
        teacher_comment TEXT,
        grade INTEGER,
        check_date TEXT,
        FOREIGN KEY (task_id) REFERENCES tasks(task_id)
    )''')

    conn.commit()
    conn.close()

init_db()

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —É—á–∏—Ç–µ–ª—è
@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id == ADMIN_ID:
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É—á–∏—Ç–µ–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /panel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register")

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É—á–∏—Ç–µ–ª—è
@bot.message_handler(commands=['panel'])
def teacher_panel(message):
    if message.from_user.id == ADMIN_ID:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤'))
        markup.add(types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è'))
        markup.add(types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
        bot.send_message(message.chat.id, "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞
@bot.message_handler(commands=['register'])
def register_student(message):
    if message.from_user.id == ADMIN_ID:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤")
        return

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(msg, process_name_step)

def process_name_step(message):
    try:
        name = message.text
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10–ê):")
        bot.register_next_step_handler(msg, lambda m: process_class_step(m, name))
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

def process_class_step(message, name):
    try:
        class_name = message.text
        user_id = message.from_user.id
        username = message.from_user.username
        
        conn = sqlite3.connect('tutor_bot.db')
        cursor = conn.cursor()
        cursor.execute('INSERT INTO students (user_id, username, name, class, register_date) VALUES (?, ?, ?, ?, datetime("now"))',
                      (user_id, username, name, class_name))
        conn.commit()
        conn.close()
        
        bot.send_message(message.chat.id, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {name}!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞–Ω–∏—è.")
        bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π —É—á–µ–Ω–∏–∫:\n–ò–º—è: {name}\n–ö–ª–∞—Å—Å: {class_name}\nUsername: @{username}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

# –ü—Ä–∏–µ–º –∑–∞–¥–∞–Ω–∏–π –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤
@bot.message_handler(content_types=['text', 'photo'])
def handle_task(message):
    if message.from_user.id == ADMIN_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conn = sqlite3.connect('tutor_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM students WHERE user_id = ?', (message.from_user.id,))
    student = cursor.fetchone()
    
    if not student:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register")
        return

    task_text = message.text if message.text else "–§–æ—Ç–æ –∑–∞–¥–∞—á–∏"
    
    if message.photo:
        photo = message.photo[-1]
        file_info = bot.get_file(photo.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        photo_path = f"tasks/{message.from_user.id}_{photo.file_id}.jpg"
        with open(photo_path, 'wb') as new_file:
            new_file.write(downloaded_file)
    else:
        photo_path = None

    cursor.execute('INSERT INTO tasks (user_id, task_text, photo_path, status, send_date) VALUES (?, ?, ?, "pending", datetime("now"))',
                  (message.from_user.id, task_text, photo_path))
    task_id = cursor.lastrowid
    
    conn.commit()
    conn.close()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_{task_id}"))
    
    student_info = f"{student[2]} ({student[3]}) @{student[1]}" if student[1] else f"{student[2]} ({student[3]})"
    
    bot.send_message(
        ADMIN_ID,
        f"üìö –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç {student_info}\nID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n{task_text}",
        reply_markup=markup
    )

    bot.reply_to(message, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π —É—á–∏—Ç–µ–ª–µ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('check_'))
def check_task(call):
    task_id = call.data.split('_')[1]
    
    conn = sqlite3.connect('tutor_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM tasks WHERE task_id = ?', (task_id,))
    task = cursor.fetchone()
    
    if not task:
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    cursor.execute('SELECT * FROM students WHERE user_id = ?', (task[1],))
    student = cursor.fetchone()
    
    msg = bot.send_message(
        call.message.chat.id,
        f"–ó–∞–¥–∞–Ω–∏–µ –æ—Ç: {student[2]} ({student[3]})\n\n–¢–µ–∫—Å—Ç: {task[2]}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ—Ü–µ–Ω–∫—É (1-5):"
    )
    bot.register_next_step_handler(msg, lambda m: process_feedback(m, task_id))

def process_feedback(message, task_id):
    feedback = message.text
    
    conn = sqlite3.connect('tutor_bot.db')
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
    cursor.execute('UPDATE tasks SET status = "checked" WHERE task_id = ?', (task_id,))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    cursor.execute('''
    INSERT INTO feedback (task_id, teacher_comment, grade, check_date)
    VALUES (?, ?, ?, datetime("now"))
    ''', (task_id, feedback, 5))  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ü–µ–Ω–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞
    cursor.execute('SELECT user_id FROM tasks WHERE task_id = ?', (task_id,))
    user_id = cursor.fetchone()[0]
    
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—á–µ–Ω–∏–∫—É
    bot.send_message(
        user_id,
        f"üìù –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–∏—Ç–µ–ª—è:\n{feedback}"
    )
    
    bot.send_message(
        message.chat.id,
        "‚úÖ –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–µ–Ω–∏–∫—É!"
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤' and message.from_user.id == ADMIN_ID)
def show_students(message):
    conn = sqlite3.connect('tutor_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM students')
    students = cursor.fetchall()
    conn.close()
    
    if not students:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤")
        return
    
    response = "üë• –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n\n"
    for student in students:
        response += f"{student[2]} ({student[3]}) - @{student[1]}\n"
    
    bot.send_message(message.chat.id, response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
